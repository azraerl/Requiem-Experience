using MathNet.Numerics.Statistics;
using System;
using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Runtime.Versioning;

namespace RequiemExperience
{
    [SupportedOSPlatform("windows7.0")]
    [SupportedOSPlatform("windows10")]
    public class Program
    {
        static Lazy<Settings> _LazySettings = null!;
        public static Settings Settings => _LazySettings.Value;
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .SetAutogeneratedSettings(nickname: "Settings", path: "Settings.json", out _LazySettings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "Experience_Patch.esp")
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            bool patched = false;

            // Add new game setting to patch: "fXPLevelUpBase"
            state.PatchMod.GameSettings.Add(new GameSettingFloat(state.PatchMod.GetNextFormKey(), state.PatchMod.SkyrimRelease)
                { EditorID = "fXPLevelUpBase", Data = Settings.General.LevelUpXPBase });
            // Add new game setting to patch: "fXPLevelUpMult"
            state.PatchMod.GameSettings.Add(new GameSettingFloat(state.PatchMod.GetNextFormKey(), state.PatchMod.SkyrimRelease)
                { EditorID = "fXPLevelUpMult", Data = Settings.General.LevelUpXPMult });

            patched |= QuestPatcher.RunPatch(state, Settings);
            patched |= RacePatcher.RunPatch(state, Settings);
            patched |= SkillPatcher.RunPatch(state, Settings);
            if(!patched)
            {
                state.PatchMod.Clear();
            }

            string rewardINI = state.ExtraSettingsDataPath + @"\Reward_Experience.ini";
            string unlvldINI = state.ExtraSettingsDataPath + @"\True_Experience.ini";
            var outputPath = $@"{state.DataFolderPath}\SKSE\Plugins\Experience.ini";
            switch (Settings.General.Preset)
            {
                case General.ExperiencePreset.TrueUnlevelled:
                    Console.WriteLine($@"Writing {unlvldINI} preset to {outputPath}");
                    File.WriteAllLines(outputPath, File.ReadAllLines(unlvldINI).Select(x => Regex.Replace(x, @"\s*;.*$", "")));
                    break;
                case General.ExperiencePreset.ExtraRewarding:
                    Console.WriteLine($@"Writing {rewardINI} preset to {outputPath}");
                    File.WriteAllLines(outputPath, File.ReadAllLines(rewardINI).Select(x => Regex.Replace(x, @"\s*;.*$", "")));
                    break;
            }
        }
    }
}
